// Business entity registration (LLC, Corporation, etc.)
import { supabase } from './supabase';

export interface BusinessEntity {
  id: string;
  user_id: string;
  entity_type: 'llc' | 'corporation' | 'partnership' | 'sole_proprietorship';
  business_name: string;
  state: string;
  ein: string | null;
  registration_date: Date;
  status: 'pending' | 'approved' | 'rejected';
  documents: string[];
  registered_agent: {
    name: string;
    address: string;
    city: string;
    state: string;
    zip: string;
  };
  business_address: {
    street: string;
    city: string;
    state: string;
    zip: string;
  };
  created_at: Date;
}

export class BusinessEntityManager {
  async registerLLC(data: {
    businessName: string;
    state: string;
    userId: string;
    registeredAgent: BusinessEntity['registered_agent'];
    businessAddress: BusinessEntity['business_address'];
  }): Promise<BusinessEntity> {
    
    const response = await fetch('/api/business/register-llc', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: data.businessName,
        state: data.state,
        registeredAgent: data.registeredAgent,
        businessAddress: data.businessAddress
      })
    });
    
    if (!response.ok) throw new Error('LLC registration failed');

    // removed unused: const registrationResult = await response.json();
    await response.json(); // still need to consume the body to avoid fetch warnings

    const entity: BusinessEntity = {
      id: crypto.randomUUID(),
      user_id: data.userId,
      entity_type: 'llc',
      business_name: data.businessName,
      state: data.state,
      ein: null,
      registration_date: new Date(),
      status: 'pending',
      documents: [],
      registered_agent: data.registeredAgent,
      business_address: data.businessAddress,
      created_at: new Date()
    };
    
    const { error } = await supabase
      .from('business_entities')
      .insert(entity);
    
    if (error) throw error;

    await this.applyForEIN(entity.id);
    return entity;
  }

  async applyForEIN(entityId: string): Promise<void> {
    const { data: entity, error } = await supabase
      .from('business_entities')
      .select('*')
      .eq('id', entityId)
      .single();
    
    if (error) throw error;

    try {
      const response = await fetch('/api/irs/apply-ein', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          businessName: entity.business_name,
          entityType: entity.entity_type,
          businessAddress: entity.business_address,
          responsibleParty: entity.registered_agent
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        
        await supabase
          .from('business_entities')
          .update({ ein: result.ein })
          .eq('id', entityId);
      }
    } catch (error) {
      console.error('EIN application failed:', error);
    }
  }

  async generateOperatingAgreement(entityId: string): Promise<string> {
    const { data: entity, error } = await supabase
      .from('business_entities')
      .select('*')
      .eq('id', entityId)
      .single();
    
    if (error) throw error;

    const template = `
OPERATING AGREEMENT
${entity.business_name}

This Operating Agreement is entered into on ${entity.registration_date.toDateString()}.

ARTICLE I - ORGANIZATION
1.1 Formation: ${entity.business_name} is organized as a Limited Liability Company under the laws of ${entity.state}.

ARTICLE II - BUSINESS PURPOSE
2.1 Purpose: The Company shall engage in automated business operations and revenue generation through digital platforms.

ARTICLE III - MANAGEMENT
3.1 Management: The Company shall be managed by its members.

ARTICLE IV - CAPITAL CONTRIBUTIONS
4.1 Initial Contributions: Members shall contribute capital as agreed upon.

ARTICLE V - DISTRIBUTIONS
5.1 Distributions: Profits and losses shall be allocated to members based on their ownership percentages.

This agreement is governed by the laws of ${entity.state}.

Generated by DreamSeller Pro on ${new Date().toDateString()}
    `;
    
    const documentUrl = await this.saveDocument(entityId, 'operating_agreement', template);
    return documentUrl;
  }

  private async saveDocument(entityId: string, type: string, content: string): Promise<string> {
    const fileName = `${entityId}-${type}-${Date.now()}.txt`;
    const blob = new Blob([content], { type: 'text/plain' });

    const { error } = await supabase.storage
      .from('business-documents')
      .upload(fileName, blob);
    
    if (error) throw error;
    
    const { data: urlData } = supabase.storage
      .from('business-documents')
      .getPublicUrl(fileName);
    
    const { data: docData } = await supabase
      .from('business_entities')
      .select('documents')
      .eq('id', entityId)
      .single();
    
    const updatedDocuments = [...(docData?.documents || []), urlData.publicUrl];

    await supabase
      .from('business_entities')
      .update({ documents: updatedDocuments })
      .eq('id', entityId);
    
    return urlData.publicUrl;
  }

  async getUserEntities(userId: string): Promise<BusinessEntity[]> {
    const { data, error } = await supabase
      .from('business_entities')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });
    
    if (error) throw error;
    return data || [];
  }
}

export const businessEntityManager = new BusinessEntityManager();
