// Tax records and legal document management
import { supabase } from './supabase';
import jsPDF from 'jspdf';

export interface TaxRecord {
  id: string;
  year: number;
  quarter: number;
  total_revenue: number;
  total_expenses: number;
  net_income: number;
  tax_owed: number;
  documents: string[];
  created_at: Date;
}

export interface LegalDocument {
  id: string;
  type: 'llc_formation' | 'tax_return' | 'business_license' | 'contract' | 'invoice';
  title: string;
  file_url: string;
  created_at: Date;
  metadata: Record<string, any>;
}

interface RevenueRow {
  amount: number;
}

export class TaxRecordManager {
  async generateQuarterlyReport(year: number, quarter: number): Promise<TaxRecord> {
    const startDate = new Date(year, (quarter - 1) * 3, 1);
    const endDate = new Date(year, quarter * 3, 0);

    // Get revenue data
    const { data: revenue, error: revenueError } = await supabase
      .from('revenue_streams')
      .select('amount')
      .gte('recorded_at', startDate.toISOString())
      .lte('recorded_at', endDate.toISOString());

    if (revenueError) throw revenueError;

    const totalRevenue = revenue?.reduce((sum: number, r: RevenueRow) => sum + r.amount, 0) || 0;

    // Calculate estimated expenses (20% of revenue for simplicity)
    const totalExpenses = totalRevenue * 0.2;
    const netIncome = totalRevenue - totalExpenses;
    const taxOwed = netIncome * 0.25; // Estimated 25% tax rate

    const taxRecord: TaxRecord = {
      id: `${year}-Q${quarter}`,
      year,
      quarter,
      total_revenue: totalRevenue,
      total_expenses: totalExpenses,
      net_income: netIncome,
      tax_owed: taxOwed,
      documents: [],
      created_at: new Date()
    };

    // Save to database
    const { error } = await supabase
      .from('tax_records')
      .upsert(taxRecord);

    if (error) throw error;

    return taxRecord;
  }

  async generateTaxDocumentPDF(record: TaxRecord): Promise<void> {
    const doc = new jsPDF();

    // Header
    doc.setFontSize(20);
    doc.text('Quarterly Tax Report', 20, 30);

    doc.setFontSize(12);
    doc.text(`Year: ${record.year}`, 20, 50);
    doc.text(`Quarter: ${record.quarter}`, 20, 60);
    doc.text(`Generated: ${record.created_at.toLocaleDateString()}`, 20, 70);

    // Financial Summary
    doc.setFontSize(16);
    doc.text('Financial Summary', 20, 90);

    doc.setFontSize(12);
    doc.text(`Total Revenue: $${record.total_revenue.toFixed(2)}`, 20, 110);
    doc.text(`Total Expenses: $${record.total_expenses.toFixed(2)}`, 20, 120);
    doc.text(`Net Income: $${record.net_income.toFixed(2)}`, 20, 130);
    doc.text(`Estimated Tax Owed: $${record.tax_owed.toFixed(2)}`, 20, 140);

    // Footer
    doc.setFontSize(10);
    doc.text('This is an automated report generated by DreamSeller Pro', 20, 280);
    doc.text('Consult with a tax professional for official tax preparation', 20, 290);

    doc.save(`Tax-Report-${record.year}-Q${record.quarter}.pdf`);
  }

  async uploadLegalDocument(file: File, type: LegalDocument['type'], metadata: Record<string, any> = {}): Promise<LegalDocument> {
    // Upload file to Supabase Storage
    const fileName = `${Date.now()}-${file.name}`;
    const { error: uploadError } = await supabase.storage
      .from('legal-documents')
      .upload(fileName, file);

    if (uploadError) throw uploadError;

    // Get public URL
    const { data: urlData } = supabase.storage
      .from('legal-documents')
      .getPublicUrl(fileName);

    const document: LegalDocument = {
      id: crypto.randomUUID(),
      type,
      title: file.name,
      file_url: urlData.publicUrl,
      created_at: new Date(),
      metadata
    };

    // Save to database
    const { error } = await supabase
      .from('legal_documents')
      .insert(document);

    if (error) throw error;

    return document;
  }

  async getLegalDocuments(): Promise<LegalDocument[]> {
    const { data, error } = await supabase
      .from('legal_documents')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) throw error;
    return data || [];
  }
}

export const taxRecordManager = new TaxRecordManager();
