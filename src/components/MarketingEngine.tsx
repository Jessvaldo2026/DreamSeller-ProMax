import React, { useState, useEffect } from 'react';
import { Share2, Mail, Video, Image, Calendar, Zap } from 'lucide-react';
import { supabase } from '../lib/supabase';

interface MarketingCampaign {
  id: string;
  name: string;
  type: 'social' | 'email' | 'sms' | 'video';
  platforms: string[];
  status: 'draft' | 'scheduled' | 'active' | 'completed';
  content: string;
  scheduled_at: Date;
  performance: {
    reach: number;
    engagement: number;
    clicks: number;
    conversions: number;
  };
  created_at: Date;
}

export default function MarketingEngine() {
  const [campaigns, setCampaigns] = useState<MarketingCampaign[]>([]);
  const [newCampaign, setNewCampaign] = useState({
    name: '',
    type: 'social' as const,
    platforms: [] as string[],
    content: '',
    scheduled_at: ''
  });

  const socialPlatforms = [
    { id: 'tiktok', name: 'TikTok', icon: '🎵' },
    { id: 'instagram', name: 'Instagram', icon: '📸' },
    { id: 'pinterest', name: 'Pinterest', icon: '📌' },
    { id: 'youtube', name: 'YouTube Shorts', icon: '📺' },
    { id: 'twitter', name: 'Twitter', icon: '🐦' },
    { id: 'facebook', name: 'Facebook', icon: '📘' }
  ];

  useEffect(() => {
    loadCampaigns();
    startAutoPosting();
  }, []);

  const loadCampaigns = async () => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) return;

      const { data, error } = await supabase
        .from('marketing_campaigns')
        .select('*')
        .eq('user_id', session.user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setCampaigns(data || []);
    } catch (error) {
      console.error('Failed to load campaigns:', error);
    }
  };

  const startAutoPosting = () => {
    // Check for scheduled posts every minute
    setInterval(async () => {
      await executeScheduledPosts();
    }, 60000);
  };

  const executeScheduledPosts = async () => {
    try {
      const now = new Date();
      const scheduledCampaigns = campaigns.filter(
        c => c.status === 'scheduled' && new Date(c.scheduled_at) <= now
      );

      for (const campaign of scheduledCampaigns) {
        await executeCampaign(campaign);
      }
    } catch (error) {
      console.error('Auto-posting failed:', error);
    }
  };

  const executeCampaign = async (campaign: MarketingCampaign) => {
    try {
      // Post to each selected platform
      for (const platform of campaign.platforms) {
        await postToPlatform(platform, campaign.content);
      }

      // Update campaign status
      await supabase
        .from('marketing_campaigns')
        .update({ status: 'active' })
        .eq('id', campaign.id);

      loadCampaigns();
    } catch (error) {
      console.error(`Failed to execute campaign ${campaign.name}:`, error);
    }
  };

  const postToPlatform = async (platform: string, content: string) => {
    try {
      const response = await fetch(`/api/social/${platform}/post`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          content,
          autoGenerated: true
        })
      });

      if (!response.ok) throw new Error(`Failed to post to ${platform}`);
    } catch (error) {
      console.error(`Failed to post to ${platform}:`, error);
    }
  };

  const createCampaign = async () => {
    if (!newCampaign.name || !newCampaign.content || newCampaign.platforms.length === 0) {
      alert('Please fill in all required fields');
      return;
    }

    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) throw new Error('Not authenticated');

      const { data, error } = await supabase
        .from('marketing_campaigns')
        .insert({
          user_id: session.user.id,
          name: newCampaign.name,
          type: newCampaign.type,
          platforms: newCampaign.platforms,
          content: newCampaign.content,
          status: newCampaign.scheduled_at ? 'scheduled' : 'draft',
          scheduled_at: newCampaign.scheduled_at || null,
          performance: {
            reach: 0,
            engagement: 0,
            clicks: 0,
            conversions: 0
          }
        })
        .select()
        .single();

      if (error) throw error;

      setCampaigns(prev => [data, ...prev]);
      setNewCampaign({
        name: '',
        type: 'social',
        platforms: [],
        content: '',
        scheduled_at: ''
      });
      alert('Campaign created successfully!');
    } catch (error) {
      console.error('Failed to create campaign:', error);
      alert('Failed to create campaign');
    }
  };

  const generateContent = async () => {
    try {
      const response = await fetch('/api/ai/generate-social-content', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          type: newCampaign.type,
          platforms: newCampaign.platforms
        })
      });

      const { content } = await response.json();
      setNewCampaign(prev => ({ ...prev, content }));
    } catch (error) {
      console.error('Content generation failed:', error);
    }
  };

  const handlePlatformToggle = (platformId: string) => {
    setNewCampaign(prev => ({
      ...prev,
      platforms: prev.platforms.includes(platformId)
        ? prev.platforms.filter(id => id !== platformId)
        : [...prev.platforms, platformId]
    }));
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-white mb-2">Marketing Engine</h2>
          <p className="text-blue-200">Auto-post to social media and manage campaigns</p>
        </div>
        <div className="text-right">
          <p className="text-sm text-blue-200">Active Campaigns</p>
          <p className="text-2xl font-bold text-green-400">{campaigns.filter(c => c.status === 'active').length}</p>
        </div>
      </div>

      {/* Create Campaign */}
      <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
        <h3 className="text-xl font-bold text-white mb-4">Create Marketing Campaign</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium text-blue-200 mb-2">Campaign Name</label>
            <input
              type="text"
              value={newCampaign.name}
              onChange={(e) => setNewCampaign(prev => ({ ...prev, name: e.target.value }))}
              className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-300 focus:ring-2 focus:ring-blue-400 outline-none"
              placeholder="Product Launch Campaign"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-blue-200 mb-2">Type</label>
            <select
              value={newCampaign.type}
              onChange={(e) => setNewCampaign(prev => ({ ...prev, type: e.target.value as any }))}
              className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white focus:ring-2 focus:ring-blue-400 outline-none"
            >
              <option value="social">Social Media</option>
              <option value="email">Email Marketing</option>
              <option value="sms">SMS Marketing</option>
              <option value="video">Video Content</option>
            </select>
          </div>
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium text-blue-200 mb-2">Platforms</label>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
            {socialPlatforms.map(platform => (
              <div
                key={platform.id}
                onClick={() => handlePlatformToggle(platform.id)}
                className={`p-3 rounded-lg border cursor-pointer transition-all ${
                  newCampaign.platforms.includes(platform.id)
                    ? 'border-blue-400 bg-blue-600/20'
                    : 'border-white/20 bg-white/5 hover:bg-white/10'
                }`}
              >
                <div className="flex items-center space-x-2">
                  <span className="text-lg">{platform.icon}</span>
                  <span className="text-white text-sm">{platform.name}</span>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="mb-4">
          <div className="flex items-center justify-between mb-2">
            <label className="block text-sm font-medium text-blue-200">Content</label>
            <button
              onClick={generateContent}
              className="bg-purple-600 text-white px-3 py-1 rounded text-sm hover:bg-purple-700 flex items-center space-x-1"
            >
              <Zap className="w-3 h-3" />
              <span>AI Generate</span>
            </button>
          </div>
          <textarea
            value={newCampaign.content}
            onChange={(e) => setNewCampaign(prev => ({ ...prev, content: e.target.value }))}
            className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-300 focus:ring-2 focus:ring-blue-400 outline-none"
            placeholder="Enter your marketing content..."
            rows={4}
          />
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium text-blue-200 mb-2">Schedule (Optional)</label>
          <input
            type="datetime-local"
            value={newCampaign.scheduled_at}
            onChange={(e) => setNewCampaign(prev => ({ ...prev, scheduled_at: e.target.value }))}
            className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white focus:ring-2 focus:ring-blue-400 outline-none"
          />
        </div>

        <button
          onClick={createCampaign}
          className="bg-gradient-to-r from-pink-600 to-purple-600 text-white px-6 py-3 rounded-lg font-semibold hover:from-pink-700 hover:to-purple-700 transition-all duration-200"
        >
          Create Campaign
        </button>
      </div>

      {/* Active Campaigns */}
      <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
        <h3 className="text-xl font-bold text-white mb-4">Marketing Campaigns</h3>
        <div className="space-y-4">
          {campaigns.map((campaign) => (
            <div key={campaign.id} className="bg-white/5 rounded-lg p-4 border border-white/10">
              <div className="flex justify-between items-start mb-3">
                <div>
                  <h4 className="text-white font-semibold">{campaign.name}</h4>
                  <p className="text-sm text-blue-200">Type: {campaign.type}</p>
                  <div className="flex flex-wrap gap-1 mt-1">
                    {campaign.platforms.map(platformId => {
                      const platform = socialPlatforms.find(p => p.id === platformId);
                      return (
                        <span key={platformId} className="text-xs bg-blue-600/20 text-blue-300 px-2 py-1 rounded">
                          {platform?.icon} {platform?.name}
                        </span>
                      );
                    })}
                  </div>
                </div>
                <div className="text-right">
                  <p className={`text-sm ${
                    campaign.status === 'active' ? 'text-green-400' :
                    campaign.status === 'scheduled' ? 'text-blue-400' :
                    campaign.status === 'completed' ? 'text-purple-400' :
                    'text-yellow-400'
                  }`}>
                    {campaign.status}
                  </p>
                  {campaign.scheduled_at && (
                    <p className="text-xs text-gray-400">
                      {new Date(campaign.scheduled_at).toLocaleString()}
                    </p>
                  )}
                </div>
              </div>
              
              {campaign.status === 'active' && (
                <div className="grid grid-cols-4 gap-4 mt-3 text-center">
                  <div>
                    <p className="text-xs text-blue-200">Reach</p>
                    <p className="text-white font-semibold">{campaign.performance.reach.toLocaleString()}</p>
                  </div>
                  <div>
                    <p className="text-xs text-blue-200">Engagement</p>
                    <p className="text-white font-semibold">{campaign.performance.engagement.toLocaleString()}</p>
                  </div>
                  <div>
                    <p className="text-xs text-blue-200">Clicks</p>
                    <p className="text-white font-semibold">{campaign.performance.clicks}</p>
                  </div>
                  <div>
                    <p className="text-xs text-blue-200">Conversions</p>
                    <p className="text-white font-semibold">{campaign.performance.conversions}</p>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
        <h3 className="text-xl font-bold text-white mb-4">Quick Marketing Actions</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <button className="bg-pink-600/20 border border-pink-400/30 rounded-lg p-4 hover:bg-pink-600/30 transition-colors">
            <Video className="w-8 h-8 text-pink-400 mb-2" />
            <p className="text-white font-medium">Create TikTok</p>
          </button>
          
          <button className="bg-purple-600/20 border border-purple-400/30 rounded-lg p-4 hover:bg-purple-600/30 transition-colors">
            <Image className="w-8 h-8 text-purple-400 mb-2" />
            <p className="text-white font-medium">Instagram Story</p>
          </button>
          
          <button className="bg-blue-600/20 border border-blue-400/30 rounded-lg p-4 hover:bg-blue-600/30 transition-colors">
            <Mail className="w-8 h-8 text-blue-400 mb-2" />
            <p className="text-white font-medium">Email Blast</p>
          </button>
          
          <button className="bg-green-600/20 border border-green-400/30 rounded-lg p-4 hover:bg-green-600/30 transition-colors">
            <Calendar className="w-8 h-8 text-green-400 mb-2" />
            <p className="text-white font-medium">Schedule Posts</p>
          </button>
        </div>
      </div>
    </div>
  );
}